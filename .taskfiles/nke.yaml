version: '3'

tasks:

  default:
  - task: :helpers:validate
    vars:
      REQUIRED_TOOLS_LIST: gum,krew,kubectl

  check-krew-plugins:
    deps: [default]
    silent: true
    desc: Check kubectl plugins and if not available, install
    cmds:
    - '[ -n "$(which kubectl-karbon)" ] || task workstation:krew'
    - echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"'

  download-creds:
    deps: [check-krew-plugins]
    silent: false
    precondition:
    - sh: test -d ${HOME}/.kube
      msg: "${HOME}/.kube doesn't exist, please create and try again."
    desc: Download NKE kubeconfig for specific cluster
    cmds:
    - |
      export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH" && \
      KARBON_PASSWORD="${PRISM_CENTRAL_PASS}" kubectl karbon login -u ${PRISM_CENTRAL_USER} --server ${PRISM_CENTRAL_ENDPOINT} --cluster ${K8S_CLUSTER_NAME} --force --insecure --kubeconfig ${HOME}/.kube/${K8S_CLUSTER_NAME}.cfg
    - echo "export KUBECONFIG=${HOME}/.kube/${K8S_CLUSTER_NAME}.cfg" && kubectl config use-context ${K8S_CLUSTER_NAME}-context
    requires:
      vars: [K8S_CLUSTER_NAME, PRISM_CENTRAL_PASS, PRISM_CENTRAL_USER, PRISM_CENTRAL_ENDPOINT]

  ## prompt for cred, download kubectl config locally and use context on current shell
  prompt-creds:
    deps: [check-krew-plugins]
    silent: false
    desc: Prompt to download NKE kubeconfig for any cluster available on target PC.
    vars:
      PRISM_CENTRAL_ENDPOINT:
        sh: 'task bootstrap:gum -- input --header "What is your Prism Central Endpoint" --placeholder pc.ntnxlab.local'
      PRISM_CENTRAL_USER:
        sh: 'task bootstrap:gum -- input --header "What is your Prism Central Username" --placeholder admin'
      PRISM_CENTRAL_PASS:
        sh: 'task bootstrap:gum -- input --header "What is your Prism Central Password" --placeholder "nutanix/4u" --password'
    cmds:
    - KARBON_PASSWORD="{{.PRISM_CENTRAL_PASS}}" kubectl karbon login -u {{.PRISM_CENTRAL_USER}} --server {{.PRISM_CENTRAL_ENDPOINT}} --force --insecure --kubeconfig ${HOME}/.kube/tmp-kubeconfig
    - |
      export NKE_CLUSTER_NAME=$(kubectl config view --raw --minify -o jsonpath="{.clusters[0].name}" --kubeconfig ${HOME}/.kube/tmp-kubeconfig) && \
      kubectl config view --raw --minify --kubeconfig ${HOME}/.kube/tmp-kubeconfig | tee ${HOME}/.kube/${NKE_CLUSTER_NAME}.cfg && \
      echo "export KUBECONFIG=${HOME}/.kube/${NKE_CLUSTER_NAME}.cfg" && \
      kubectl config use-context ${NKE_CLUSTER_NAME}-context && \
      echo "export K8S_CLUSTER_NAME=${NKE_CLUSTER_NAME}"
    interactive: true

  load-cluster:
    silent: false
    deps: [default]
    desc: Load Existing Cluster Instance
    cmds:
    - |
      export NKE_CLUSTER_NAME=$(task bootstrap:gum -- choose --header "Select existing K8S instance to load." $(find .local/** -type d -not -name _common -print | cut -d / -f 2)) && \
      echo "export K8S_CLUSTER_NAME=${NKE_CLUSTER_NAME}" && \
      export K8S_CLUSTER_NAME=${NKE_CLUSTER_NAME} && task nke:download-creds
    interactive: true

